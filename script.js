// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web Apps
const tg = window.Telegram.WebApp;
tg.ready();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram Web App API
if (!window.Telegram || !window.Telegram.WebApp) {
    console.error("Telegram Web App API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
} else {
    console.log("Telegram Web App API —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω");
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let userData = {
    height: 0,
    weight: 0,
    goal: '',
    allergies: [],
    points: 0,
    achievements: [],
    water: 0,
    steps: 0,
    weightHistory: [70], // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    dailyCalories: 0,
    dailyMacros: { protein: 0, fat: 0, carbs: 0 },
    menu: []
};

// –°–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
const dishes = [
    { name: "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏", mealType: "–ó–∞–≤—Ç—Ä–∞–∫", calories: 300, protein: 10, fat: 5, carbs: 50, allergens: ["–ú–æ–ª–æ–∫–æ"], recipe: "–°–≤–∞—Ä–∏ –æ–≤—Å—è–Ω–∫—É –Ω–∞ –≤–æ–¥–µ, –¥–æ–±–∞–≤—å —è–≥–æ–¥—ã." },
    { name: "–ö—É—Ä–∏–Ω—ã–π —Å—É–ø", mealType: "–û–±–µ–¥", calories: 400, protein: 20, fat: 10, carbs: 40, allergens: [], recipe: "–ù–∞—Ä–µ–∂—å –æ–≤–æ—â–∏, —Å–≤–∞—Ä–∏ –±—É–ª—å–æ–Ω, –¥–æ–±–∞–≤—å –∫—É—Ä–∏—Ü—É." },
    { name: "–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º", mealType: "–£–∂–∏–Ω", calories: 250, protein: 15, fat: 8, carbs: 20, allergens: ["–†—ã–±–∞"], recipe: "–°–º–µ—à–∞–π –ª–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞, —Ç—É–Ω–µ—Ü, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ." },
    { name: "–ì—Ä–µ—á–∫–∞ —Å –æ–≤–æ—â–∞–º–∏", mealType: "–û–±–µ–¥", calories: 350, protein: 12, fat: 6, carbs: 60, allergens: [], recipe: "–°–≤–∞—Ä–∏ –≥—Ä–µ—á–∫—É, –¥–æ–±–∞–≤—å —Ç—É—à—ë–Ω—ã–µ –æ–≤–æ—â–∏." },
    { name: "–ô–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏", mealType: "–ó–∞–≤—Ç—Ä–∞–∫", calories: 280, protein: 8, fat: 12, carbs: 30, allergens: ["–ú–æ–ª–æ–∫–æ", "–û—Ä–µ—Ö–∏"], recipe: "–°–º–µ—à–∞–π –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏." }
];

// Onboarding
const onboarding = document.getElementById('onboarding');
const mainApp = document.getElementById('main-app');
const onboardingForm = document.getElementById('onboarding-form');

// –°–±—Ä–æ—Å–∏–º localStorage –¥–ª—è —Ç–µ—Å—Ç–∞
// localStorage.removeItem('onboardingCompleted');

if (!localStorage.getItem('onboardingCompleted')) {
    onboarding.classList.remove('hidden');
} else {
    mainApp.classList.remove('hidden');
}

onboardingForm.addEventListener('submit', (e) => {
    e.preventDefault();
    userData.height = document.getElementById('height').value;
    userData.weight = document.getElementById('weight').value;
    userData.goal = document.getElementById('goal').value;
    userData.allergies = Array.from(document.querySelectorAll('input[name="allergy"]:checked')).map(input => input.value);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É
    showSlide(3);
});

function showSlide(slideNumber) {
    document.querySelectorAll('.onboarding-slide').forEach(slide => slide.classList.remove('active'));
    document.querySelectorAll('.onboarding-dots .dot').forEach(dot => dot.classList.remove('active'));
    document.querySelector(`.onboarding-slide[data-slide="${slideNumber}"]`).classList.add('active');
    document.querySelector(`.onboarding-dots .dot[data-dot="${slideNumber}"]`).classList.add('active');
}

function completeOnboarding() {
    localStorage.setItem('onboardingCompleted', 'true');
    onboarding.classList.add('hidden');
    mainApp.classList.remove('hidden');
    calculateCalories();
    generateMenu();
    displayMenu();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º
function toggleTheme() {
    const body = document.body;
    if (body.classList.contains('dark-theme')) {
        body.classList.remove('dark-theme');
        body.classList.add('light-theme');
        document.getElementById('theme-toggle-btn').textContent = 'üåô';
    } else {
        body.classList.remove('light-theme');
        body.classList.add('dark-theme');
        document.getElementById('theme-toggle-btn').textContent = '‚òÄÔ∏è';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function showTab(tabId) {
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.bottom-nav button').forEach(btn => btn.classList.remove('active'));
    document.getElementById(tabId).classList.add('active');
    document.querySelector(`.tabs button[onclick="showTab('${tabId}')"]`).classList.add('active');
    document.querySelector(`.bottom-nav button[onclick="showTab('${tabId}')"]`).classList.add('active');
}

// –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
function addPoints(points) {
    userData.points += points;
    document.getElementById('user-points').textContent = userData.points;
    checkAchievements();
}

function checkAchievements() {
    if (userData.points >= 50 && !userData.achievements.includes('50_points')) {
        userData.achievements.push('50_points');
        tg.showAlert('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 50 –±–∞–ª–ª–æ–≤!');
    }
    if (userData.water >= 2 && !userData.achievements.includes('water_goal')) {
        userData.achievements.push('water_goal');
        tg.showAlert('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –¶–µ–ª—å –ø–æ –≤–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
    }
    document.getElementById('user-achievements').textContent = `${userData.achievements.length}/5`;
}

function markMealCompleted(button, dish) {
    button.disabled = true;
    button.textContent = '–°—ä–µ–¥–µ–Ω–æ';
    addPoints(10);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const currentCalories = parseInt(document.getElementById('calories').textContent.split(' / ')[0]) + dish.calories;
    const currentProtein = parseInt(document.getElementById('macros').textContent.match(/–ë: (\d+)/)[1]) + dish.protein;
    const currentFat = parseInt(document.getElementById('macros').textContent.match(/–ñ: (\d+)/)[1]) + dish.fat;
    const currentCarbs = parseInt(document.getElementById('macros').textContent.match(/–£: (\d+)/)[1]) + dish.carbs;
    document.getElementById('calories').textContent = `${currentCalories} / ${userData.dailyCalories} –∫–∫–∞–ª`;
    document.getElementById('macros').textContent = `–ë: ${currentProtein}–≥ –ñ: ${currentFat}–≥ –£: ${currentCarbs}–≥`;
}

// –†–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π (—Ñ–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞)
function calculateCalories() {
    const weight = parseFloat(userData.weight);
    const height = parseFloat(userData.height);
    const age = 30; // –ü—Ä–∏–º–µ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ onboarding
    const bmr = 10 * weight + 6.25 * height - 5 * age + 5; // –î–ª—è –º—É–∂—á–∏–Ω
    let activityLevel = 1.2; // –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (userData.goal === "–ú–∞—Å—Å–æ–Ω–∞–±–æ—Ä") activityLevel = 1.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –º–∞—Å—Å–æ–Ω–∞–±–æ—Ä–∞
    if (userData.goal === "–ü–æ—Ö—É–¥–µ–Ω–∏–µ") activityLevel = 1.0; // –£–º–µ–Ω—å—à–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
    userData.dailyCalories = Math.round(bmr * activityLevel);
    userData.dailyMacros = {
        protein: Math.round(userData.dailyCalories * 0.3 / 4), // 30% –∫–∞–ª–æ—Ä–∏–π –æ—Ç –±–µ–ª–∫–æ–≤
        fat: Math.round(userData.dailyCalories * 0.3 / 9),     // 30% –∫–∞–ª–æ—Ä–∏–π –æ—Ç –∂–∏—Ä–æ–≤
        carbs: Math.round(userData.dailyCalories * 0.4 / 4)    // 40% –∫–∞–ª–æ—Ä–∏–π –æ—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤
    };
    document.getElementById('calories').textContent = `0 / ${userData.dailyCalories} –∫–∫–∞–ª`;
    document.getElementById('macros').textContent = `–ë: ${userData.dailyMacros.protein}–≥ –ñ: ${userData.dailyMacros.fat}–≥ –£: ${userData.dailyMacros.carbs}–≥`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é
function generateMenu() {
    userData.menu = [];
    const mealTypes = ["–ó–∞–≤—Ç—Ä–∞–∫", "–û–±–µ–¥", "–£–∂–∏–Ω"];
    let totalCalories = 0;

    mealTypes.forEach(mealType => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –∏ –∞–ª–ª–µ—Ä–≥–∏—è–º
        let availableDishes = dishes.filter(dish => 
            dish.mealType === mealType && 
            !dish.allergens.some(allergen => userData.allergies.includes(allergen))
        );

        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–ª—é–¥–∞, –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ
        if (availableDishes.length > 0) {
            const dish = availableDishes[Math.floor(Math.random() * availableDishes.length)];
            userData.menu.push(dish);
            totalCalories += dish.calories;
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ —Ü–µ–ª–∏
    if (userData.goal === "–ü–æ—Ö—É–¥–µ–Ω–∏–µ" && totalCalories > userData.dailyCalories * 0.9) {
        // –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –º–µ–Ω—é
        generateMenu();
    } else if (userData.goal === "–ú–∞—Å—Å–æ–Ω–∞–±–æ—Ä" && totalCalories < userData.dailyCalories * 0.9) {
        // –ï—Å–ª–∏ –∫–∞–ª–æ—Ä–∏–π —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—É—Å
        let snacks = dishes.filter(dish => 
            !dish.allergens.some(allergen => userData.allergies.includes(allergen))
        );
        if (snacks.length > 0) {
            const snack = snacks[Math.floor(Math.random() * snacks.length)];
            userData.menu.push({ ...snack, mealType: "–ü–µ—Ä–µ–∫—É—Å" });
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
function displayMenu() {
    const mealList = document.querySelector('.meal-list');
    mealList.innerHTML = '';
    userData.menu.forEach(dish => {
        const mealCard = document.createElement('div');
        mealCard.className = 'meal-card';
        mealCard.innerHTML = `
            <div class="placeholder">Placeholder</div>
            <p>${dish.mealType}: ${dish.name}</p>
            <button onclick="markMealCompleted(this, ${JSON.stringify(dish).replace(/"/g, '&quot;')})">–°—ä–µ–ª</button>
        `;
        mealList.appendChild(mealCard);
    });
}

// –†–µ—Ü–µ–ø—Ç—ã
function showRecipeDetails() {
    const recipeList = userData.menu.map(dish => `
        <div class="recipe-card">
            <div class="placeholder">Placeholder (–≤–∏–¥–µ–æ)</div>
            <h3>${dish.name}</h3>
            <p>${dish.recipe}</p>
        </div>
    `).join('');
    document.getElementById('recipes').innerHTML = `
        <h2>–†–µ—Ü–µ–ø—Ç—ã</h2>
        ${recipeList}
        <button onclick="showTab('recipes')">–ù–∞–∑–∞–¥</button>
    `;
}

function addRecipe() {
    const recipeName = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:');
    const recipeSteps = prompt('–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (—Ä–∞–∑–¥–µ–ª—è–π –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏):');
    const mealType = prompt('–¢–∏–ø –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–ó–∞–≤—Ç—Ä–∞–∫, –û–±–µ–¥, –£–∂–∏–Ω, –ü–µ—Ä–µ–∫—É—Å):');
    if (recipeName && recipeSteps && mealType) {
        dishes.push({
            name: recipeName,
            mealType: mealType,
            calories: 300, // –ü—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥ –∫–∞–ª–æ—Ä–∏–π
            protein: 10,
            fat: 5,
            carbs: 40,
            allergens: [],
            recipe: recipeSteps
        });
        const recipeCard = document.createElement('div');
        recipeCard.className = 'recipe-card';
        recipeCard.innerHTML = `
            <div class="placeholder">Placeholder</div>
            <h3>${recipeName}</h3>
            <p>${recipeSteps.replace(/\n/g, '<br>')}</p>
            <button onclick="showRecipeDetails()">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
        `;
        document.getElementById('recipes').prepend(recipeCard);
    }
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å
function addWater() {
    userData.water += 0.25; // 250 –º–ª –∑–∞ —Å—Ç–∞–∫–∞–Ω
    document.getElementById('water').textContent = `${userData.water} / 2 –ª`;
    checkAchievements();
}

// –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
const ctx = document.getElementById('weight-chart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: ['–î–µ–Ω—å 1', '–î–µ–Ω—å 2', '–î–µ–Ω—å 3'],
        datasets: [{
            label: '–í–µ—Å (–∫–≥)',
            data: userData.weightHistory,
            borderColor: '#007aff',
            fill: false
        }]
    },
    options: {
        scales: {
            y: {
                beginAtZero: false
            }
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (localStorage.getItem('onboardingCompleted')) {
    calculateCalories();
    generateMenu();
    displayMenu();
    showTab('today');
}
